{"name":"Oauth1-provider","tagline":"An OAuth 1.0a provider for Python","body":"# OAuth 1.0a Provider for Python\r\n\r\nI want to build a scalable OAuth 1.0a Provider that is easy to subclass specifically in authenticating users against\r\nvarious databases. Focuses in leveraging performance by using Redis as the primary OAuth Provider backend, user\r\nauthentications can be handled differently using any other databases.\r\n\r\nAfter much thoughts, I am developing more stores other than Redis. To keep things simple, there are 2 types of stores:\r\n- SQL Based (SQLAlchemy)\r\n- NoSQL Based (Currently only Redis)\r\n\r\nThere is an abstract Base class for stores called <code>Oauth1StoreBase</code>. Extend and implements the required\r\nmethods to create your own stores.\r\n\r\nCoded against [RFC5849](http://tools.ietf.org/html/rfc5849) so please excuse any mishaps, everyone is welcomed to fork\r\nand send pull requests.\r\n\r\n# As of this README, I am restructuring the whole package. Earlier codes will break. Revert to 0.3.0 for safety.\r\n\r\n## Compatibility Against [RFC5849](http://tools.ietf.org/html/rfc5849)\r\n\r\nWith this README, I have no plans in supporting 3 legged authentications. I am only supporting XAuth at the moment.\r\nFork and contribute to add support to 3 legged authentications.\r\n\r\nOAuth 1.0a Authorization components are all expected from Authorization header. Example below.\r\n\r\n```\r\nAuthorization: OAuth realm=\"http://localhost:5000/\",\r\n        oauth_consumer_key=\"dpf43f3p2l4k3l03\",\r\n        oauth_signature_method=\"HMAC-SHA1\",\r\n        oauth_timestamp=\"137131200\",\r\n        oauth_nonce=\"wIjqoS\",\r\n        oauth_signature=\"74KNZJeDHnMBp0EMJ9ZHt%2FXKycU%3D\"\r\n```\r\n\r\n## Usage\r\n\r\nThe main package depends on these Python modules:\r\n- flask\r\n- redis\r\n- SQLAlchemy\r\n\r\nThe test.py file depends on these Python modules:\r\n- oauthnesia\r\n\r\n### Real Usage and Extending The Provider\r\n\r\n```python\r\nfrom flask import Flask, jsonify\r\nfrom oauth1.authorize import Oauth1\r\nfrom oauth1.errors.oauth import Oauth1Errors\r\nfrom oauth1.store.sql import Oauth1StoreSQLAlchemy\r\nfrom oauth1.store.nosql import Oauth1StoreRedis\r\n\r\nBASE_URL = \"http://localhost:5000/\"\r\n\r\napp = Flask(__name__)\r\napp.config['SQLALCHEMY_DATABASE_URI'] = \"sqlite:///:memory:\"    # Change this to a valid URI\r\n\r\n\r\nclass SQLProvider(Oauth1):\r\n\r\n    def __init__(self):\r\n        store = Oauth1StoreSQLAlchemy(app=app)\r\n        super(SQLProvider, self).__init__(base_url=BASE_URL, store=store)\r\n\r\n    def _verify_xauth_credentials(self, username, password):\r\n        return username == 'username' and password == 'password'\r\n\r\napp.config['REDIS_HOST'] = '127.0.0.1'\r\napp.config['REDIS_PORT'] = 6379\r\napp.config['REDIS_DB'] = 0\r\napp.config['REDIS_NS'] = 'oauth1-provider-nosql'\r\n\r\n\r\nclass RedisProvider(Oauth1):\r\n\r\n    def __init__(self):\r\n        store = Oauth1StoreRedis(host=app.config['REDIS_HOST'], port=app.config['REDIS_PORT'],\r\n                                 db=app.config['REDIS_DB'], namespace=app.config['REDIS_NS'])\r\n        super(RedisProvider, self).__init__(base_url=BASE_URL, store=store)\r\n\r\n    def _verify_xauth_credentials(self, username, password):\r\n        return username == 'username' and password == 'password'\r\n\r\n# For SQL Store\r\noauth = SQLProvider()\r\n\r\n# For Redis Store\r\n#oauth = RedisProvider()\r\n\r\n@app.route('/oauth/', methods=['GET', 'POST'])\r\n@app.route('/oauth/<action>', methods=['POST'])\r\ndef oauth(action=None):\r\n    if action == 'access_token':\r\n        cons_check = oauth.authorize_consumer()\r\n        if isinstance(cons_check, str):\r\n            return Oauth1Errors.forbidden(cons_check)\r\n\r\n        authorized = oauth.authorize_request(uri='oauth/access_token')\r\n        if isinstance(authorized, str):\r\n            return Oauth1Errors.unauthorized(authorized)\r\n\r\n        # Check username/password from XAuth\r\n        x_check = oauth.authorize_xauth()\r\n        if isinstance(x_check, str):\r\n            return Oauth1Errors.bad_request(x_check)\r\n\r\n        return jsonify(status='ok')\r\n    else:\r\n        return Oauth1Errors.not_found('There is no valid resource here')\r\n\r\n@app.route('/user/<user_uri>', methods=['GET', 'POST'])\r\ndef user(user_uri=None):\r\n    if not user_uri:\r\n        return Oauth1Errors.bad_request('You must supply a User URI')\r\n    else:\r\n        cons_check = oauth.authorize_consumer()\r\n        if isinstance(cons_check, str):\r\n            return Oauth1Errors.forbidden(cons_check)\r\n\r\n        authorized = oauth.authorize_request(uri='oauth/access_token')\r\n        if isinstance(authorized, str):\r\n            return Oauth1Errors.unauthorized(authorized)\r\n\r\n        return jsonify(uri=user_uri)\r\n\r\n@app.errorhandler(404)\r\ndef not_found(error):\r\n    return Oauth1Errors.not_found()\r\n\r\nif __name__ == \"__main__\":\r\n    app.debug = True\r\n    app.run()\r\n```\r\n\r\n## Feedbacks\r\n\r\nAgain I am still new to Python, please give some feedbacks on best practices. Pull Requests are very welcomed.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}